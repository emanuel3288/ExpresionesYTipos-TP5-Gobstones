/*
CONSIGNA.
Suponiendo que se está programando un juego donde en las celdas del tablero se representan
Soldados (los aliados con una bolita de color Negro y los enemigos con una bolita de color Rojo por
cada soldado), escribir los siguientes procedimientos:

A-EnviarAliadosParaDuplicarEnemigos(), que agrega soldados aliados en la celda actual
en cantidad suficiente para que haya el doble de aliados que de soldados enemigos.

b. PelearLaBatalla(), que simula una batalla, suponiendo que hay suficiente cantidad de
soldados aliados como para ganar la batalla. Durante una batalla, 2 soldados enemigos pelean
contra 3 soldados aliados y todos mueren. Por ejemplo, si hay 6 enemigos y 10 aliados, mueren
los 6 enemigos y 9 de los aliados; si hay 10 enemigos y 21 aliados, mueren los 10 enemigos y
15 soldados aliados.
PISTA: ¿Qué cuenta hay que hacer para saber cuántos soldados aliados morirán?

*/
program {
    EnviarAliadosParaDuplicarEnemigos()
}

//Parte b
procedure  PelearLaBatalla() {
    /*
    PROPÓSITO:      -
    PRECONDICIÓN:   -
    */

    
}

// Parte A
procedure  EnviarAliadosParaDuplicarEnemigos() {
    /*
    PROPÓSITO:      -Agrega el doble de soldados que de enemigos en la celda actual.
    PRECONDICIÓN:   -Debe existir al menos un enemigo en la celda actual.
    */
    Poner_DeColor_((nroBolitas(Rojo)*2) - nroBolitas(Negro), Negro)
}
procedure Poner_DeColor_(cantidadAPoner, colorAPoner) {
  /*
  PROPOSITO:    -Poner **cantidadAPoner** de color **colorAPoner** en la celda actual.
  PRECONDICION: -Ninguna.
  PARAMETROS:   -**cantidadAPoner**: Numero.Indíca la cantidad de bolitas a poner.
                -**colorAPoner**:    Color. Indíca el color de la/s bolita/s a poner.
  */
  repeat(cantidadAPoner) {
    Poner(colorAPoner)
  }
}






